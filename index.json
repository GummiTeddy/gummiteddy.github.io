[{"categories":null,"contents":"TBA\n","permalink":"https://example.com/projects/contributions/deploy-triggers/","tags":["Java","jQuery","REST APIs","Bamboo","JSON"],"title":"TBA"},{"categories":null,"contents":"RFID tags not only can be used as identification devices, with antenna sensing techniques, they can also be used as low-cost and battery-less sensors. However, RFID antenna sensing relies on the impedance and/or gain modulation of the tag’s antenna, and extracts the sensing information through the RSSI variation of the backscattered signals. The sensing information is prone to the interferences and noises in the reader-tag communication channel, as well as the distance variations if the sensors are in constant motion. In this paper, we propose a sensor structure that is constructed from adjacently placed double tags to address these issues. The EM properties of the antennas of the double tags behave differently (or even oppositely) under the same sensing variation; therefore, the differential backscattered signals of the dual-tag sensor can eliminate the common-mode interferences while preserving the sensing information. We have constructed one curvature sensor and one deformation sensor with embroidered antennas (using conductive yarns) and all-fabric materials, and sewn the sensors on apparels to demonstrate their use in smart clothing applications. The experiments show that even when the human body is in constant motion, the curvature sensor sewn on the knee area can effectively monitor human’s body gesture, while the deformation sensor sewn on the chest area can precisely detect the respiration activities.\n link:https://ieeexplore.ieee.org/document/9739718    ","permalink":"https://example.com/publications/joun1/","tags":["DevOps","Continuous Integration","Continuous Delivery","CI/CD pipelines","agile","Culture"],"title":"Battery-Less Sensing of Body Movements Through Differential Backscattered RFID Signals"},{"categories":null,"contents":"Wearable sensors demand flexible and concealable devices that can be seamlessly integrated with apparels and clothes. E-textile sensors and devices, built from specially functionalized fibers and yarns and constructed with embroidery and woven processes, provide an ideal solution for different wearable applications. In this article, we propose a textile-based, embroidered passive strain and displacement sensor functioned as a UHF RFID antenna that can be aesthetically integrated with garment fabrics. The antenna structure consists of a dipole arm and a coupling loop mounted with an RFID chip. The displacement between the loop and dipole arm will alter the impedance of the antenna and consequently modulate the backscattered signals from the RFID chip to the reader. The sensor is passive, i.e., no battery is needed on the sensor and the sensing information can be wirelessly retrieved by the reader from a few meters away. The structure is sensitive to strains and displacement caused by body movement. Our experiments demonstrate different applications for this sensor, i.e., when the sensor is embroidered on different locations on human body, such as breast, knees, and elbows, it can be used as a respiration monitor, gesture indicator, etc. to conveniently track and log various forms of body movements.\n link:https://ieeexplore.ieee.org/document/9409960  ","permalink":"https://example.com/publications/joun2/","tags":["DevOps","Continuous Integration","Continuous Delivery","CI/CD pipelines","agile","Culture"],"title":"E-Textile Battery-Less Displacement and Strain Sensor for Human Activities Tracking"},{"categories":null,"contents":"RFID technology not only enables wireless identification, it also provides the platform for battery-less antenna sensing capabilities, i.e., the sensing information is modulated by the antenna impedance, and it can later be extracted from the backscattered signals by the readers. However, antenna sensing is prone to interference and ambient environment impacts, such as distance variation and noise in the transmission path. These factors can cause amplitude and phase changes of the received signals, and deteriorate the quality of the sensing information. In this paper, we propose a deformation sensor that consists of two adjacent-placed RFID antennas. The impedance of the two antennas will be modulated differently under the bending condition, and the deformation information can be extracted from the differential backscattered signals of the two antennas. To be deployed as a wearable body gesture sensor, the two antennas are embroidered on apparel using conductive yarns. Experiments show that differential sensing signals can effectively eliminate the impact from ambient interference, while tracking the body gesture even under varying reading distances.\n link:https://ieeexplore.ieee.org/document/9444326  ","permalink":"https://example.com/publications/conf1/","tags":["DevOps","Continuous Integration","Continuous Delivery","CI/CD pipelines","agile","Culture"],"title":"Wearable Deformation Sensor with Ambient Interference Rejection Using Differential Backscattered RFID Signals"},{"categories":null,"contents":"Shields.io is a massive library of badges that can be inserted into project README\u0026rsquo;s or websites displaying various statuses (code coverage, health, version, etc). Support for docker was missing the current build health, and was a pretty trivial addition.\n","permalink":"https://example.com/projects/contributions/shields-docker/","tags":["Docker","Rest APIs","JavaScript","node.js","JSON"],"title":"TBA"},{"categories":null,"contents":"While adding Structured Data to a client\u0026rsquo;s website I found some example JSON that was invalid. Simple contribution to cleanup the user documentation providing syntactically valid JSON documents.\n","permalink":"https://example.com/projects/contributions/schema-org/","tags":["JSON"],"title":"TBA"},{"categories":null,"contents":"TBA\n","permalink":"https://example.com/projects/creations/patent/","tags":["DevOps","BOSH","Java","Atlassian Ecosystem","monit","python","xml/xslt","bash/shell","REST APIs"],"title":"Patent: New anti-interference sensor based on RFID"},{"categories":null,"contents":"Intro Doesn\u0026rsquo;t matter whether it\u0026rsquo;s a CakePHP app for a client, your own personal CMS, or any other web based application. If your passing around passwords or other sensitive info you should really implement SSL. SSL provides 2 main perks to your visitors.\n First it encrypts all communication that flies across the web. This prevents curious or devious billies from getting your secrets. Secondly it ensures to the user that your server is in fact who it claims, and not a nasty \u0026lsquo;man in the middle\u0026quot; attack. Finally it gives your site that touch of class\u0026hellip;. which of course a classy person like yourself relies on.  Once you implement SSL certificates on your server you\u0026rsquo;ll want to require secure connections using Apache\u0026rsquo;s rewrite module. Now I won\u0026rsquo;t dwell on the creation and signing of certificates, its already well documented. If your just starting out though,heres a few links I recommend;\n Creating self-signed certificates (free, but should only be used internally or for testing, users will; see an \u0026lsquo;Untrusted\u0026quot; warning) Requesting a CA Signed certificate (not free, but the final certificate is trusted and seamless for users)  The second link uses the schools internal CA, you will need to pay a public CA like Entrust or Verisign. All of this information is aimed at \u0026lsquo;nix or solaris servers running apache. Why? cause a production windows server is laughable :-p\nNow that you have a certificate, whats next? So there you are you have a shiny new Certificate and Server key, how do you force visitors to your apache driven site to use the SSL? You copied the certificates into the appropite locations right? And you have made the needed changes in httpd.conf right? So now when you view https://example.com you see a \u0026lsquo;trusted\u0026rsquo; warning or your site right? If No to any of these than this article does a pretty good job of outlining those steps.\nThe SSL Works, How do I force connections to use it? First you need to decide if you want to force every page on your site to use SSL, or only a particular sub-domain, or maybe just your admin directory. Since the overhead is minimal there is no harm is forcing the entire domain to leverage SSL, but if it is a self-signed certificate for your personal use than you\u0026rsquo;ll most certainly want to restrict its use to your own areas. This prevents users from seeing that nasty warning \u0026ldquo;This server is not trusted\u0026rdquo; You\u0026rsquo;ll know if your using SSL because the url prefix changes from http to https (s for secure).\nForcing entire domain to use SSL You want any visit, any where to use ssl. This probably the simplest solution. Create or append to your htaccess file in the top directory of your server. Some people use a port check (80 is typically http, while 443 is https) but if you have alernate configs or the user just adds :8080 to the end of the url this method is useless. Instead check whether the https environmental variable is set, if not then redirect.\nRewriteCond %{HTTPS} !=on RewriteRule ^(.*)$ https://%{SERVER_NAME}$1 \\[R,L\\] Forcing sub-domains to use SSL Maybe you only want mysecretarea.example.com to use SSL, that\u0026rsquo;s easy enough. Its the same premise as above, but you move the htaccess file into the directory that corresponds to the subdomain. Also change the second line like below;\nRewriteCond %{HTTPS} !=on RewriteRule ^(.*)$ https://mysecretarea.%{SERVER_NAME}$1 \\[R,L\\] Forcing a directory to use SSL This method cn get a little hairier if your using aliases or redirects on top of this one. You\u0026rsquo;ll need to consider what order the commands are read. The basic principle is like so. You want all visits to example.com/admin to use ssl. Create a htaccess file in the parent directory. Again will check for the https variable, but this time we also check for the sub-directory to be in the path.\nRewriteCond %{HTTPS} !=on RewriteRule ^/admin/(.*)$ https://%{SERVER_NAME}/admin/$1 \\[R,L\\] ","permalink":"https://example.com/blog/force-ssl/","tags":["apache","apache","redirect","rewrite","ssl","web development"],"title":"Forcing Visits to use SSL"},{"categories":null,"contents":"Multiple plugins used by thousands of teams that provide enhanced functionality of Atlassian’s core products (primarily JIRA and Bamboo) to enrich CI/CD capabilities, DevOps automation, or productivity. Functionality spans user interface, web services and persistence.\n","permalink":"https://example.com/projects/creations/marketplace/","tags":["Java","Spring","REST APIs","Javascript","Atlassian Developer Ecosystem","Bamboo","JIRA","Bitbucket","Confluence","DevOps"],"title":"Atlassian Marketplace Plugins"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml\n[outputs] home = [\u0026#34;HTML\u0026#34;, \u0026#34;JSON\u0026#34;] Searching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category\n... \u0026#34;contents\u0026#34;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026#34;tags\u0026#34;:{{ .Params.tags | jsonify }}{{end}}, \u0026#34;categories\u0026#34; : {{ .Params.categories | jsonify }}, ... Edit fuse.js options to Search static/js/search.js\nkeys: [ \u0026#34;title\u0026#34;, \u0026#34;contents\u0026#34;, \u0026#34;tags\u0026#34;, \u0026#34;categories\u0026#34; ] ","permalink":"https://example.com/search/","tags":null,"title":"Search Results"},{"categories":null,"contents":"Provides required dependencies and additional utilities to simplify and codify the process of building, testing and delivering Atlassian plugins all the way to the live marketplace.Executes integration/AUT level tests against all stated compatible versions for the productUploads generated artifact to Atlassian marketplaceProvides corresponding metadata indicating version, release notes, and compatibility","permalink":"https://example.com/projects/creations/docker-marketplace/","tags":["Docker","Maven","Java","Python","REST APIs","Bash/Shell"],"title":"TBA  \"shipit\""}]